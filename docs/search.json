[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Shaun Porwal",
    "section": "",
    "text": "Personal site.\nInterests: existential contemplation, languages, exercise, cooking, nutrition, anime, coding"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "dcurves",
    "section": "",
    "text": "dcurves\nI wrote a Python package that evaluates binary and survival models. It has been downloaded 20k+ times.\n\nPyPI: https://pypi.org/project/dcurves/\nGitHub: https://github.com/MSKCC-Epi-Bio/dcurves\npypistats: https://pypistats.org/packages/dcurves\npepy.tech: https://pepy.tech/projects/dcurves"
  },
  {
    "objectID": "posts/webdev-is-tricky/index.html",
    "href": "posts/webdev-is-tricky/index.html",
    "title": "It’s all in the framework!",
    "section": "",
    "text": "Getting to the point of having a decent site for myself was a very long and arduous journey. Unlucky for me, I never took any HTML/CSS/JavaScript classes and was starting from absolute 0. For someone who’s looking to contract it out and has a healthy budget, it can be smooth and seamless. Unfortunately, I have a knack for masochism, an engineering degree, and am always looking for ways to be frugal.\nThis journey all started when I saw the landing page for the statistical method my boss invented in all its glory (sarcasm). I had been tasked with creating its Python library, so I thought it a good idea to simultaneously make my first foray into front-end development and design an informational and instructional page for users (https://decisioncurveanalysis.org/). Well-versed in R, I used basic CSS and Rmd files to render my R code into HTML and stored it in a GitHub repo, taking advantage of the GitHub Pages free hosting service.\nAt around the same time, I spun up a personal site in the same way, and reused a lot of the same simple code I used for my boss’s page. Needless to say, it was neither very functional nor aesthetic. I kept on iterating on it for months and months and before finally putting it down. I was actually so embarrassed by it that I stripped it of its contents and, for a long time, left it bare with a note saying ‘Under Renovation’.\nA short while ago I encountered someone on GitHub using the distill package in R to make their portfolio site, and it came out looking incredible. It fit the bill in terms of aesthetics and having a nice blog and ‘about’ page, but there were some functionalities that were indispensable for me. I really wanted a framework that could integrate R & Python code seamlessly for my data science projects. After much digging, I finally came across Quarto!\nQuarto is just so amazing. It fully supports Python & R integration, has a very spare, neat aesthetic, and the best part: It’s extremely simple to get up and running! This is the first time I’ve felt empowered rather than encumbered by my web framework."
  },
  {
    "objectID": "posts/best-resume-builder/index.html",
    "href": "posts/best-resume-builder/index.html",
    "title": "The Best Resume Builder I Have Ever Used",
    "section": "",
    "text": "As with most of us, I have been creating, updating, and sending resumes for a non-trivial amount of time. It all started with Microsoft Word. I first filled out all of my information using a friend’s resume as a template, and sent it off to be seen by absolutely nobody. With each passing rejection I would, at irregular intervals, make revisions, maybe alter the format or font a bit, adjust the verbiage to make sure the content never exceeded a page, and continue fishing in what were usually rough waters.\nEventually, as my technical skills grew along with my frustration at continually wasting time editing my resume with little to show in return, I began exploring ways to automate this process. I looked far and wide for the proverbial giants’ shoulders I could firmly step onto.\nI tried using various frameworks that could handle all the formatting with my content, and for years and years I struggled with bugs, troubleshooting, virtual environments, and sometimes all 3 at once. Finally, I found rxresu.me, which I warmly recommend to absolutely everyone. It handles all the formatting and allows just enough customization to accommodate any sort of experience or project one would include without losing its intuitive and enjoyable UI. You can check out my resume made by that tool if you click on ‘CV’ on the top-right."
  },
  {
    "objectID": "old_files/projects.html",
    "href": "old_files/projects.html",
    "title": "Gravity Chamber",
    "section": "",
    "text": "Gravity Chamber\n\n\n\n\n\nGravity Chamber Python Code\n2023\n\n\n\n\nPython Package: dcurves\n\n\nDecision Curve Analysis Python Package\n2023\nDiagnostic and prognostic models are typically evaluated with measures of accuracy that do not address clinical consequences. Decision-analytic techniques allow assessment of clinical outcomes but often require additional information that may be cumbersome to apply to models that yield continuous results. Decision Curve Analysis is a method for evaluating and comparing prediction models that incorporates clinical consequences, requiring only the dataset on which the models are tested, and can be applied to models that have either continuous or dichotomous results.\nThe dca function performs decision curve analysis for binary and survival outcomes. Review the DCA tutorial for a detailed walkthrough of various applications.\n\n\n\n\nSites\n\n\nDecision Curve Analysis Site\n2023\nI made this site for my boss’ statistical method “Decision Curve Analysis”. This method is used to evaluate prediction models, molecular markers, and tests, based on clinical consequences.\n\n\n\n\n\nSite for UN NGO (1)\n\n\nSite for UN NGO (2)\n2023\nI made these sites for my contacts at the UN running NGOs. These are simple sites that I’m iterating on as necessary, and I do this pro bono to help out those who are dedicating themselves to noble causes."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Shaun Porwal",
    "section": "",
    "text": "How I completely automated my Python Package Development Workflow\n\n\n\n\n\n\nPython\n\n\nPackages\n\n\nCI/CD\n\n\n\n\n\n\n\n\n\nJan 9, 2025\n\n\nShaun Porwal\n\n\n\n\n\n\n\n\n\n\n\n\nThe Best Resume Builder I Have Ever Used\n\n\n\n\n\n\nresume\n\n\nconvenience\n\n\nUI/UX\n\n\n\n\n\n\n\n\n\nDec 12, 2024\n\n\nShaun Porwal\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s all in the framework!\n\n\n\n\n\n\nwebdev\n\n\ncode\n\n\n\n\n\n\n\n\n\nDec 8, 2024\n\n\nShaun Porwal\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/python-package-automation/index.html",
    "href": "posts/python-package-automation/index.html",
    "title": "How I completely automated my Python Package Development Workflow",
    "section": "",
    "text": "Whenever you start doing something, whatever it is, you will be extremely far from efficient at it. I think it’s probably a law of the universe or something. There are also fundamental concepts in machine learning called ‘loss functions’ and ‘gradient descent’ which are analogous to the same phenomenon in humans. The basic idea is that we know there’s a fundamental truth, or something to aim for. We take iterative steps towards the goal, and eventually either we end up at the goal, or we become extremely efficient at achieving it.\nLet’s take this blog as an example. The last 2 posts I wrote are steaming hot trash. I was basically just trying to churn out my thoughts and get into the groove of writing. I tried to articulate myself around 2 topics I was thinking about, and used lots of language I cringe at when I go reread. The style also seems overly formal and the pieces are not too captivating in my perspective. I feel like the tone in this post, however, is closer to what I’d like to maintain on this site. It’s personable, has a flow of consciousness feel to it, and relates disparate ideas in a haphazard way. As a person, I’d say that’s way more representative of who I am as opposed to being focused on a singular topic and rusty with the words I like to use.\nAnyways, around 3-4 years ago, I was asked at work to build a Python package by my boss. Initially, not only did I know nothing about Python packaging and open source, I also knew embarassingly little about Python. I was fresh out of my Master’s degree and very much green around my ears and everywhere else. I started following this dude named neuralnine on YouTube, and his python packaging video was the first thing I ever saw on the subject (YouTube Link). He used twine and some other tools in a rudimentary way to get something up on PyPI.org very quickly. It didn’t have any of the bells and whistles I use today, but it worked, which in hindsight is actually massive.\nHis workflow I probably used for a good while, maybe around 2 years or so, before I was introduced to more experienced people in the field who integrated CI/CD and Poetry, for example, and automating all of the testing. It was actually using the old workflow that I actually had people sending me messages about how they’re using my package and like my implementation, and that they’d like this improvement or that bugfix. Case in point:\n\nAfter several years of maintaining and improving the packge I made, now I have a very fast, headache-free workflow that has allowed me to build something that can cater to a larger audience. I was actually shocked to learn this, but my package recently hit 25k downloads! Have a gander on pepy.tech:\n\nYou always see those shows on [insert your favorite media platform] where the main character goes through a period of hardship or training in order to gain some new power or ability. I feel like the hardships of making this package over the past few years have allowed me to refine my package-building and programming workflow to such a degree that things which would have taken me days or weeks to do previously now take seconds. This is the level of efficiency you can achieve in programming if you put your attention in the right places.\nFor anyone who’s read this far, you deserve this present. Here is the GitHub actions file I’ve generated after much trial and tribulation: GitHub Link.\nThis automates testing on different Python versions, pushing to test.pypi, pypi, and can easily include linting and generating a documentation site. I would have murdered to have had this a few years ago.\nFor all things local, please use Poetry, which is currently far superior to astral-uv. This is my hottest take currently. Poetry is tried and tested, and worked seamlessly, albeit much more slowly, for the entire packaging workflow. With uv I felt like I was passing the largest kidney stone known to man when I was trying to push packages to pypi/test.pypi."
  }
]